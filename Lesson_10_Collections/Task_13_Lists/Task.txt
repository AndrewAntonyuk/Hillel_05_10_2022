X 1. Создать метод countOccurance, принимающий на вход строковый список в качестве параметра и произвольную строку. Список заполнен произвольными словами 10-20 штук, которые могут повторяться в неограниченном количестве. Посчитать сколько раз встречается переданная строка в качестве второго аргумента.



X 2. Создать метод toList, принимающий на вход целочисленный массив произвольной длины. Конвертировать массив в список соответствующего типа данных и вернуть из метода.

Например:

Было Array [1, 2, 3]

Стало List [1, 2, 3]



X 3. Создать метод findUnique, принимающий на вход числовой список состоящий из произвольных значений, которые могут повторяться в неограниченном количестве. Необходимо вернуть новый числовой список содержащий только уникальные числа.



X 4. ** Создать метод calcOccurance, принимающий на вход строковый список в качестве параметра. Список заполнен произвольными словами 10-20 штук, которые могут повторяться в неограниченном количестве. Вычислить сколько раз встречается каждое слово. Результат вывести в консоль.

Например:

bird: 2

fox: 1

cat: 1



X 4. *** Создать метод findOccurance, принимающий на вход строковый список в качестве параметра. Список заполнен произвольными словами 10-20 штук, которые могут повторяться в неограниченном количестве. Вычислить сколько раз встречается каждое слово. Результат вернуть в виде списка структур описывающих повторение каждого отдельного взятого слова.

Например:

[

   {name: "bird", occurrence: 2},

   {name: "fox", occurrence: 1},

   {name: "cat", occurrence: 1}

]







X 0. Создать новый пакет phonebook.



X 1. Создать класс Телефонный Справочник.



X 2. Создать класс Запись.



X 3. Класс Запись хранит Имя и Телефон.



X 4. Класс Телефонный Справочник хранит множество записей типа данных Запись.



X 5. В классе Телефонный Справочник реализовать метод add. Метод добавляет Запись в Телефонный Справочник.

Примечание: Под одной фамилией может храниться несколько телефонов, потому допускается вероятность наличия нескольких записей.



X 6. В классе Телефонный Справочник реализовать метод find(). Метод осуществляет поиск конкретной записи по имени. Если запись найдена (первая найденная), тогда ее необходимо вернуть, иначе возвращается null.



X 7. Подразумевается соблюдение известных (на данный момент) правил написания кода в ООП и правил "Чистоты кода".



X 8. * В классе Телефонный Справочник реализовать метод findAll(). Метод осуществляет поиск записей по имени. Если записи найдены, тогда все их необходимо вернуть, иначе возвращается null.

Такая реализация вызвана тем, что под одной фамилией может храниться несколько телефонов и при запросе по конкретному имени необходимо возвращать все имеющиеся в наличии записи.